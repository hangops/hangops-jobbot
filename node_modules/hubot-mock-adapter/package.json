{
  "_args": [
    [
      {
        "raw": "hubot-mock-adapter@^1.0.0",
        "scope": null,
        "escapedName": "hubot-mock-adapter",
        "name": "hubot-mock-adapter",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/gabinante/GitHub/hangops-jobbot"
    ]
  ],
  "_from": "hubot-mock-adapter@>=1.0.0 <2.0.0",
  "_id": "hubot-mock-adapter@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/hubot-mock-adapter",
  "_npmUser": {
    "name": "blalor",
    "email": "blalor@bravo5.org"
  },
  "_npmVersion": "1.2.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hubot-mock-adapter@^1.0.0",
    "scope": null,
    "escapedName": "hubot-mock-adapter",
    "name": "hubot-mock-adapter",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/hubot-mock-adapter/-/hubot-mock-adapter-1.0.0.tgz",
  "_shasum": "2540b3852faac70314443079946e950bd8ca6701",
  "_shrinkwrap": null,
  "_spec": "hubot-mock-adapter@^1.0.0",
  "_where": "/Users/gabinante/GitHub/hangops-jobbot",
  "author": {
    "name": "Brian Lalor",
    "email": "blalor@bravo5.org"
  },
  "bugs": {
    "url": "https://github.com/blalor/hubot-mock-adapter/issues"
  },
  "dependencies": {
    "hubot": ">=2.5.4",
    "lodash": "1.3.1"
  },
  "description": "A mock Adapter for unit testing Hubot scripts",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "2540b3852faac70314443079946e950bd8ca6701",
    "tarball": "https://registry.npmjs.org/hubot-mock-adapter/-/hubot-mock-adapter-1.0.0.tgz"
  },
  "homepage": "https://github.com/blalor/hubot-mock-adapter#readme",
  "keywords": [
    "hubot",
    "jasmine"
  ],
  "license": "WTFPL",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blalor",
      "email": "blalor@bravo5.org"
    }
  ],
  "name": "hubot-mock-adapter",
  "optionalDependencies": {},
  "readme": "# mock adapter for unit-testing Hubot\n\nI've whacked together a couple of Hubot scripts, but then they started getting\nmore complicated.  TDD is really the ONLY way to do any kind of meaningful\ndevelopment.  But even if you're not TDD'ing, you *are* testing, right?\n_Right_?\n\nI couldn't find an existing method for writing unit tests for Hubot scripts.\nAfter digging around under Hubot's hood, I figured out all I really needed was\nan `Adapter` implementation I could spy on.  That is what you see here.\n\n## example usage\n\nLet's assume you've got a really simple script, like this:\n\n    module.exports = function(robot) {\n        robot.hear(/Computer!/, function(msg) {\n            msg.reply(\"Why hello there! (ticker tape, ticker tape)\");\n        });\n    };\n\nYou want to test this, of course.  So create a Jasmine spec file:\n    \n    var path = require(\"path\");\n    \n    describe(\"Eddie the shipboard computer\", function() {\n        var robot;\n        var user;\n        var adapter;\n        \n        beforeEach(function() {\n            var ready = false;\n            \n            runs(function() {\n                // create new robot, without http, using the mock adapter\n                robot = new Robot(null, \"mock-adapter\", false, \"Eddie\");\n                \n                robot.adapter.on(\"connected\", function() {\n                    // only load scripts we absolutely need, like auth.coffee\n                    process.env.HUBOT_AUTH_ADMIN = \"1\";\n                    robot.loadFile(\n                        path.resolve(\n                            path.join(\"node_modules/hubot/src/scripts\")\n                        ),\n                        \"auth.coffee\"\n                    );\n                    \n                    // load the module under test and configure it for the\n                    // robot.  This is in place of external-scripts\n                    require(\"../index\")(robot);\n                    \n                    // create a user\n                    user = robot.brain.userForId(\"1\", {\n                        name: \"jasmine\",\n                        room: \"#jasmine\"\n                    });\n                    \n                    adapter = robot.adapter;\n                });\n                \n                robot.run();\n            });\n            \n            waitsFor(function() {\n                return ready;\n            });\n        });\n        \n        afterEach(function() {\n            robot.shutdown();\n        });\n        \n        it(\"responds when greeted\", function(done) {\n            // here's where the magic happens!\n            adapter.on(\"reply\", function(envelope, strings) {\n                expect(strings[0]).toMatch(\"Why hello there\");\n                \n                done();\n            });\n            \n            adapter.receive(new TextMessage(user, \"Computer!\"));\n        });\n    });\n\nThat's (almost) all there is to it!\n\n## firing up Jasmine\n\nAssuming you're using [`jasmine-node`][jasmine-node] to run your tests, and your\ntests are in `specs/`, just run `node_modules/.bin/jasmine-node --coffee specs`.\nFor less typing, in your `package.json`, add a `test` script:\n\n    \"scripts\": {\n        \"test\": \"node_modules/.bin/jasmine-node --coffee --color spec/\"\n    }\n\nThen you can use `npm test` to run your tests!\n\n[jasmine-node]: https://github.com/mhevery/jasmine-node\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/blalor/hubot-mock-adapter.git"
  },
  "version": "1.0.0"
}
